---
language: c
script:
  - mkdir _build _install
  - cd _build
  - cmake -DCMAKE_INSTALL_PREFIX=../_install ..
  - make VERBOSE=1
  - ctest $CTESTFLAGS
  - make install
jobs:
  include:
    - env: [ omnilint ]
      language: generic
      install: docker pull lpenz/omnilint
      script: docker run --rm -v "$PWD:$PWD" -e "RWD=$PWD" -e "MY_UID=$UID" lpenz/omnilint
    - env: [ format ]
      language: generic
      install: docker pull debian:stretch
      script:
        - docker run -d --name debian -v "$PWD:$PWD" debian:stretch sleep 9999999999
        - docker exec -t debian /bin/bash -c "apt-get update && apt-get install -y --no-install-recommends clang-format"
        - docker exec -t debian find "$PWD" \( -name '*.[ch]' -o -name '*.cc' \) -exec clang-format -i {} +
        - git diff --exit-code
    - env: [ clang-check+tidy ]
      language: generic
      install: docker pull debian:stretch
      script:
        - docker run -d --name debian -v "$PWD:$PWD" debian:stretch sleep 9999999999
        - docker exec -t debian /bin/bash -c "apt-get update && apt-get install -y --no-install-recommends cmake make pkg-config clang clang-tidy"
        - docker exec -t debian /bin/bash -c "cd $PWD && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ."
        - |
            docker exec -t debian find "$PWD" \( -name '*.[ch]' -o -name '*.cc' \) -exec clang-check -p $PWD {} +
            R=$?
            docker exec -t debian find "$PWD" \( -name '*.[ch]' -o -name '*.cc' \) -exec clang-tidy -p $PWD {} +
            exit $(($?+R))

    - env: [ coverage, CFLAGS=--coverage, CXXFLAGS=--coverage ]
      after_success:
        - bash <(curl -s https://codecov.io/bash)
    - env: [ valgrind, CTESTFLAGS='-D ExperimentalMemCheck' ]
      addons: { apt: { packages: [ valgrind ] } }
    - env: [ clang ]
      compiler: clang
    - env: [ clang-sanitize-address, CFLAGS=-fsanitize=address ]
      compiler: clang
    - env: [ clang-sanitize-memory, CFLAGS=-fsanitize=memory ]
      compiler: clang
    - env: [ clang-sanitize-undefined, CFLAGS=-fsanitize=undefined ]
      compiler: clang
    - env: [ clang-sanitize-dataflow, CFLAGS=-fsanitize=dataflow ]
      compiler: clang
    - env: [ clang-sanitize-safe-stack, CFLAGS=-fsanitize=safe-stack ]
      compiler: clang
    - name: nix
      language: nix
      script: nix-build

